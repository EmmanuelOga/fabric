<!--
    Schema test file for testing simple types.
-->

<xs:schema xmlns:itm="http://www.itm.uni-luebeck.de/fabrictest" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fabric="http://www.coalesenses.com/fabric/v2" targetNamespace="http://www.itm.uni-luebeck.de/fabrictest" elementFormDefault="qualified" attributeFormDefault="unqualified">

  <!--
      Define a simple restriction type without actually setting any
      restrictions.
  -->
  <xs:simpleType name="Simple01">
    <xs:restriction base="xs:string" />
  </xs:simpleType>

  <!--
      Define a simple restriction type which restricts an integer using both
      inclusive and exclusive boundaries.
  -->
  <xs:simpleType name="Simple02">
    <xs:restriction base="xs:unsignedByte">
      <xs:minExclusive value="127" />
      <xs:maxInclusive value="255" />
    </xs:restriction>
  </xs:simpleType>

  <!--
      Define an element which is of a built-in type.
  -->
  <xs:element name="Simple03" type="xs:short">
  </xs:element>

  <!--
      Define an element which references on of the top-level simple types 
      defined above.
  -->
  <xs:element name="Simple04" type="itm:Simple01">
  </xs:element>

  <!--
      Define an element which references on of the top-level simple types 
      defined above.
  -->
  <xs:element name="Simple05" type="itm:Simple02">
  </xs:element>

  <!--
    This element actually contains a complex type but this is just to
    make sure that arrays of simple types also work as expected.
  -->
  <xs:element name="Container">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="cont01" type="xs:int" minOccurs="3" maxOccurs="7" />
        <xs:element name="cont02" type="xs:byte" maxOccurs="11" />
        <xs:element name="cont03" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

</xs:schema>
