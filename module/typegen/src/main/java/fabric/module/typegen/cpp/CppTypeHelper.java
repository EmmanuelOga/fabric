/**
 * Copyright (c) 2010, Institute of Telematics (Dennis Pfisterer, Marco Wegner, Dennis Boldt, Sascha Seidel, Joss Widderich), University of Luebeck
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * 	  disclaimer.
 * 	- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * 	  following disclaimer in the documentation and/or other materials provided with the distribution.
 * 	- Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or promote
 * 	  products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/** 26.03.2012 11:51 */
package fabric.module.typegen.cpp;

import java.util.ArrayList;

import de.uniluebeck.sourcegen.Workspace;
import de.uniluebeck.sourcegen.c.*;

/**
 * This helper class contains various methods that are being used
 * to create C++ type definitions and structs for XSD simple types
 * that cannot be mapped to C++ data types directly. This is the
 * case, for example, for QName objects, since they consist of two
 * components (namespace and local part) and there is no such type
 * in C++ on default.
 * 
 * So we create a file with our own XSD simple type definitions
 * that can be included in type classes that are generated by
 * the C++ type generator later on.
 * 
 * @author reichart, seidel
 */
public class CppTypeHelper
{
  /** Name of the C++ header file */
  public static final String FILE_NAME = "simple_type_definitions";

  /** Header file for XSD simple type definitions */
  private static CppHeaderFile headerFile;

  /**
   * Private constructor, because all methods of this class are static.
   */
  private CppTypeHelper()
  {
    // Empty implementation
  }

  /**
   * Create a header file in the workspace and write type definitions
   * and structs for all required XSD built-in types to it.
   *
   * @param workspace Workspace object for code write-out
   *
   * @throws Exception Error during code generation
   */
  public static void init(Workspace workspace) throws Exception
  {
    // Create header file
    CppTypeHelper.headerFile = workspace.getC().getCppHeaderFile(CppTypeHelper.FILE_NAME);
    CppTypeHelper.headerFile.setComment(new CCommentImpl("Type definitions for required XSD simple types."));

    // Surround definitions with include guard
    CppTypeHelper.headerFile.addBeforeDirective("ifndef SIMPLE_TYPE_DEFINITIONS_HPP");
    CppTypeHelper.headerFile.addBeforeDirective("define SIMPLE_TYPE_DEFINITIONS_HPP");

    // Create type definitions and structs
    CppTypeHelper.headerFile.add(CppTypeHelper.createTypeDefs());
    CppTypeHelper.headerFile.add(CppTypeHelper.createStructs());

    // Close include guard
    CppTypeHelper.headerFile.addAfterDirective("endif // SIMPLE_TYPE_DEFINITIONS_HPP");
  }

  /**
   * Private helper method to create all custom type definitions.
   *
   * @return Array of CTypeDef objects
   */
  private static CTypeDef[] createTypeDefs()
  {
    ArrayList<CTypeDef> typeDefinitions = new ArrayList<CTypeDef>();

    // Add custom type definitions
    typeDefinitions.add(CppTypeDef.factory.create("unsigned char", "uint8"));
    typeDefinitions.add(CppTypeDef.factory.create("signed char", "int8"));
    typeDefinitions.add(CppTypeDef.factory.create("unsigned int", "uint16"));
    typeDefinitions.add(CppTypeDef.factory.create("signed int", "int16"));
    typeDefinitions.add(CppTypeDef.factory.create("unsigned long int", "uint32"));
    typeDefinitions.add(CppTypeDef.factory.create("signed long int", "int32"));
    typeDefinitions.add(CppTypeDef.factory.create("unsigned long long int", "uint64"));
    typeDefinitions.add(CppTypeDef.factory.create("signed long long int", "int64"));
    
    // Add type definitions for XSD simple types
    typeDefinitions.add(CppTypeHelper.createGYearDefinition());
    typeDefinitions.add(CppTypeHelper.createGMonthDefinition());
    typeDefinitions.add(CppTypeHelper.createGDayDefinition());

    // Return list as array
    return typeDefinitions.toArray(new CTypeDef[0]);
  }

  /**
   * Private helper method to create C structs for all required
   * XSD simple types.
   *
   * @return Array of CStruct objects
   *
   * @throws Exception Error during code generation
   */
  private static CStruct[] createStructs() throws Exception
  {
    ArrayList<CStruct> structs = new ArrayList<CStruct>();

    structs.add(CppTypeHelper.createHexBinaryDefinition());
    structs.add(CppTypeHelper.createBase64BinaryDefinition());
    structs.add(CppTypeHelper.createDateTimeDefinition());
    structs.add(CppTypeHelper.createTimeDefinition());
    structs.add(CppTypeHelper.createDateDefinition());
    // xs:gDate is added as type definition
    structs.add(CppTypeHelper.createGYearMonthDefinition());
    // xs:gMonth is added as type definition
    structs.add(CppTypeHelper.createGMonthDayDefinition());
    // xs:gDay is added as type definition
    structs.add(CppTypeHelper.createDurationDefinition());
    structs.add(CppTypeHelper.createNotationDefinition());
    structs.add(CppTypeHelper.createQNameDefinition());    
    structs.add(CppTypeHelper.createFloatDefinition());

    return structs.toArray(new CStruct[0]);
  }

  /**
   * Create struct definition for the xs:hexBinary type.
   *
   * typedef struct {
   *   uint16 length;
   *   int8* content;
   * } xsd_hexBinary_t;
   *
   * @return Struct with xs:hexBinary definition
   *
   * @throws Exception Error during code generation
   */
  private static CStruct createHexBinaryDefinition() throws Exception
  {
    CParam length = CParam.factory.create("uint16", "length");
    CParam content = CParam.factory.create("int8*", "content");

    CStruct hexBinaryDefinition = CStruct.factory.create("", "xsd_hexBinary_t", true, length, content);
    hexBinaryDefinition.setComment(new CCommentImpl("xs:hexBinary"));

    return hexBinaryDefinition;
  }

  /**
   * Create struct definition for the xs:base64Binary type.
   *
   * typedef struct {
   *   uint16 length;
   *   int8* content;
   * } xsd_base64Binary_t;
   *
   * @return Struct with xs:base64Binary definition
   *
   * @throws Exception Error during code generation
   */
  private static CStruct createBase64BinaryDefinition() throws Exception
  {
    CParam length = CParam.factory.create("uint16", "length");
    CParam content = CParam.factory.create("int8*", "content");

    CStruct base64BinaryDefinition = CStruct.factory.create("", "xsd_base64Binary_t", true, length, content);
    base64BinaryDefinition.setComment(new CCommentImpl("xs:base64Binary"));

    return base64BinaryDefinition;
  }

  /**
   * Create struct definition for the xs:dateTime type.
   *
   * typedef struct {
   *   uint16 year;
   *   uint8 month;
   *   uint8 day;
   *   uint8 hour;
   *   uint8 minute;
   *   uint8 second;
   * } xsd_dateTime_t;
   *
   * @return Struct with xs:dateTime definition
   *
   * @throws Exception Error during code generation
   */
  private static CStruct createDateTimeDefinition() throws Exception
  {
    CParam year = CParam.factory.create("uint16", "year");
    CParam month = CParam.factory.create("uint8", "month");
    CParam day = CParam.factory.create("uint8", "day");
    CParam hour = CParam.factory.create("uint8", "hour");
    CParam minute = CParam.factory.create("uint8", "minute");
    CParam second = CParam.factory.create("uint8", "second");

    CStruct dateTimeDefinition = CStruct.factory.create("", "xsd_dateTime_t", true, year, month, day, hour, minute, second);
    dateTimeDefinition.setComment(new CCommentImpl("xs:dateTime"));

    return dateTimeDefinition;
  }

  /**
   * Create struct definition for the xs:time type.
   *
   * typedef struct {
   *   uint8 hour;
   *   uint8 minute;
   *   uint8 second;
   *   uint16 millisecond
   * } xsd_time_t;
   *
   * @return Struct with xs:time definition
   *
   * @throws Exception Error during code generation
   */
  private static CStruct createTimeDefinition() throws Exception
  {
    CParam hour = CParam.factory.create("uint8", "hour");
    CParam minute = CParam.factory.create("uint8", "minute");
    CParam second = CParam.factory.create("uint8", "second");
    CParam msecond = CParam.factory.create("uint8", "millisecond");

    CStruct timeDefinition = CStruct.factory.create("", "xsd_time_t", true, hour, minute, second, msecond);
    timeDefinition.setComment(new CCommentImpl("xs:time"));

    return timeDefinition;
  }

  /**
   * Create struct definition for the xs:date type.
   *
   * typedef struct {
   *   uint16 year;
   *   uint8 month;
   *   uint8 day;
   * } xsd_date_t;
   * 
   * @return Struct with xs:date definition
   * 
   * @throws Exception Error during code generation
   */
  private static CStruct createDateDefinition() throws Exception
  {
    CParam year = CParam.factory.create("uint16", "year");
    CParam month = CParam.factory.create("uint8", "month");
    CParam day = CParam.factory.create("uint8", "day");

    CStruct dateDefinition = CStruct.factory.create("", "xsd_date_t", true, year, month, day);
    dateDefinition.setComment(new CCommentImpl("xs:date"));

    return dateDefinition;
  }

  /**
   * Create type definition for xs:gYear.
   *
   * typedef uint8 xsd_gYear_t;
   *
   * @return Type definition for xs:gYear
   */
  private static CTypeDef createGYearDefinition()
  {
    return CppTypeDef.factory.create("uint8", "xsd_gYear_t");
  }

  /**
   * Create struct definition for the xs:gYearMonth type.
   *
   * typedef struct {
   *   uint16 year;
   *   uint8 month;
   * } xsd_gYearMonth_t;
   *
   * @return Struct with xs:gYearMonth definition
   *
   * @throws Exception Error during code generation
   */
  private static CStruct createGYearMonthDefinition() throws Exception
  {
    CParam year = CParam.factory.create("uint16", "year");
    CParam month = CParam.factory.create("uint8", "month");

    CStruct gYearMonthDefinition = CStruct.factory.create("", "xsd_gYearMonth_t", true, year, month);
    gYearMonthDefinition.setComment(new CCommentImpl("xs:gYearMonth"));

    return gYearMonthDefinition;
  }

  /**
   * Create type definition for xs:gMonth.
   *
   * typedef uint8 xsd_gMonth_t;
   *
   * @return Type definition for xs:gMonth
   */
  private static CTypeDef createGMonthDefinition()
  {
    return CppTypeDef.factory.create("uint8", "xsd_gMonth_t");
  }

  /**
   * Create struct definition for the xs:gMonthDay type.
   *
   * typedef struct {
   *   uint8 month;
   *   uint8 day;
   * } xsd_gMonthDay_t;
   *
   * @return Struct with xs:gMonthDay definition
   *
   * @throws Exception Error during code generation
   */
  private static CStruct createGMonthDayDefinition() throws Exception
  {
    CParam month = CParam.factory.create("uint8", "month");
    CParam day = CParam.factory.create("uint8", "day");

    CStruct gMonthDayDefinition = CStruct.factory.create("", "xsd_gMonthDay_t", true, month, day);
    gMonthDayDefinition.setComment(new CCommentImpl("xs:gMonthDay"));

    return gMonthDayDefinition;
  }

  /**
   * Create type definition for xs:gDay.
   *
   * typedef uint8 xsd_gDay_t;
   * 
   * @return Type definition for xs:gDay
   */
  private static CTypeDef createGDayDefinition()
  {
    return CppTypeDef.factory.create("uint8", "xsd_gDay_t");
  }

  /**
   * Create struct definition for the xs:duration type.
   *
   * typedef struct {
   *   uint16 years;
   *   uint8 months;
   *   uint8 days
   *   uint8 hours
   *   uint8 minutes
   *   uint8 seconds
   * } xsd_duration_t;
   *
   * @return Struct with xs:duration definition
   *
   * @throws Exception Error during code generation
   */
  private static CStruct createDurationDefinition() throws Exception
  {
    CParam years = CParam.factory.create("uint16", "years");
    CParam months = CParam.factory.create("uint8", "months");
    CParam days = CParam.factory.create("uint8", "days");
    CParam hours = CParam.factory.create("uint8", "hours");
    CParam minutes = CParam.factory.create("uint8", "minutes");
    CParam seconds = CParam.factory.create("uint8", "seconds");

    CStruct durationDefinition = CStruct.factory.create("", "xsd_duration_t", true, years, months, days, hours, minutes, seconds);
    durationDefinition.setComment(new CCommentImpl("xs:duration"));

    return durationDefinition;
  }

  /**
   * Create struct definition for the xs:NOTATION type.
   *
   * typedef struct {
   *   char* namespaceURI;
   *   char* localPart;
   * } xsd_notation_t;
   *
   * @return Struct with xs:NOTATION definition
   *
   * @throws Exception Error during code generation
   */
  private static CStruct createNotationDefinition() throws Exception
  {
    CParam namespaceURI = CParam.factory.create("char*", "namespaceURI");
    CParam localPart = CParam.factory.create("char*", "localPart");

    CStruct notationDefinition = CStruct.factory.create("", "xsd_notation_t", true, namespaceURI, localPart);
    notationDefinition.setComment(new CCommentImpl("xs:NOTATION"));

    return notationDefinition;
  }

  /**
   * Create struct definition for the xs:QName type.
   *
   * typedef struct {
   *   char* namespaceURI;
   *   char* localPart;
   * } xsd_qName_t;
   *
   * @return Struct with xs:QName definition
   *
   * @throws Exception Error during code generation
   */
  private static CStruct createQNameDefinition() throws Exception
  {
    CParam namespaceURI = CParam.factory.create("char*", "namespaceURI");
    CParam localPart = CParam.factory.create("char*", "localPart");

    CStruct qNameDefinition = CStruct.factory.create("", "xsd_qName_t", true, namespaceURI, localPart);
    qNameDefinition.setComment(new CCommentImpl("xs:QName"));

    return qNameDefinition;
  }

  /**
   * Create struct definition for the xs:float type.
   * 
   * typedef struct {
   *   int32 mantissa;
   *   int16 exponent;
   * } xsd_float_t;
   * 
   * @return Struct with xs:float definition
   * 
   * @throws Exception Error during code generation
   */
  private static CStruct createFloatDefinition() throws Exception
  {
    CParam mantissa = CParam.factory.create("int32", "mantissa");
    CParam exponent = CParam.factory.create("int16", "exponent");

    CStruct floatDefinition = CStruct.factory.create("", "xsd_float_t", true, mantissa, exponent);
    floatDefinition.setComment(new CCommentImpl("xs:float"));

    return floatDefinition;
  }
}
